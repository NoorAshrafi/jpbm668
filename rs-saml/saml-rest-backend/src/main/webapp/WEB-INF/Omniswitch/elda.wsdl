<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by <idltowsdl> Tool. Version 4.2.1 -->
<definitions targetNamespace="http://ch.zurich.com/elda" 
    xmlns="http://schemas.xmlsoap.org/wsdl/" 
    xmlns:corba="http://schemas.iona.com/bindings/corba" 
    xmlns:http-conf="http://schemas.iona.com/transports/http/configuration" 
    xmlns:ns1="http://ch.zurich.com/elda/corba/typemap/" 
    xmlns:routing="http://schemas.iona.com/routing" 
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" 
    xmlns:tns="http://ch.zurich.com/elda" 
    xmlns:wsa="http://www.w3.org/2005/08/addressing" 
    xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
    xmlns:xsd1="http://ch.zurich.com/elda/xsd"
    xmlns:wsp="http://www.w3.org/ns/ws-policy"
  
    xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
  
    xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"
  
    xmlns:t="http://docs.oasis-open.org/ws-sx/ws-trust/200512"
  
    xmlns:wsaw="http://www.w3.org/2005/08/addressing"
    xmlns:http="http://cxf.apache.org/transports/http/configuration"
    xmlns:sec="http://cxf.apache.org/configuration/security"
    >
    <types>
        <xsd:schema targetNamespace="http://ch.zurich.com/elda/xsd" 
            xmlns="http://ch.zurich.com/elda/xsd" 
            xmlns:xsd="http://www.w3.org/2001/XMLSchema">
            <xsd:complexType name="common.Header_T">
                <xsd:sequence>
                    <xsd:element name="traceOn" type="xsd:boolean"/>
                    <xsd:element name="clientId" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="common.ExValuePair_T">
                <xsd:sequence>
                    <xsd:element name="key" type="xsd:string"/>
                    <xsd:element name="value" type="xsd:string"/>
                    <xsd:element name="ctx" type="xsd:int"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="common.ExValuePairSeq_T">
                <xsd:sequence>
                    <xsd:element maxOccurs="unbounded" minOccurs="0" name="item" 
                        type="common.ExValuePair_T"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="common.ExDescr_T">
                <xsd:sequence>
                    <xsd:element name="domain" type="xsd:string"/>
                    <xsd:element name="exCode" type="xsd:int"/>
                    <xsd:element name="timestamp" type="xsd:string"/>
                    <xsd:element name="extend" type="common.ExValuePairSeq_T"/>
                    <xsd:element name="traceId" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="common.Ex_T">
                <xsd:sequence>
                    <xsd:element maxOccurs="unbounded" minOccurs="0" name="item" 
                        type="common.ExDescr_T"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="common.Remarks_T">
                <xsd:sequence>
                    <xsd:element maxOccurs="unbounded" minOccurs="0" name="item" 
                        type="common.ExDescr_T"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="common.RemarksSeq_T">
                <xsd:sequence>
                    <xsd:element maxOccurs="unbounded" minOccurs="0" name="item" 
                        type="common.Remarks_T"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="common.SeqLimit_T">
                <xsd:sequence>
                    <xsd:element name="returnAll" type="xsd:boolean"/>
                    <xsd:element name="maxToReturn" type="xsd:int"/>
                    <xsd:element name="hasMore" type="xsd:boolean"/>
                    <xsd:element name="totalFound" type="xsd:int"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="common.Cursor_T">
                <xsd:sequence>
                    <xsd:element name="limSeq" type="common.SeqLimit_T"/>
                    <xsd:element name="sessionKey" type="xsd:base64Binary"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="common.ValuePair_T">
                <xsd:sequence>
                    <xsd:element name="key" type="xsd:string"/>
                    <xsd:element name="value" type="xsd:string"/>
                    <xsd:element name="ctx" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="common.ValuePairSeq_T">
                <xsd:sequence>
                    <xsd:element maxOccurs="unbounded" minOccurs="0" name="item" 
                        type="common.ValuePair_T"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="common.ValidityDate_T">
                <xsd:sequence>
                    <xsd:element name="from" type="xsd:string"/>
                    <xsd:element name="until" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="common.IdTyp_T">
                <xsd:sequence>
                    <xsd:element name="identifier" type="xsd:int"/>
                    <xsd:element name="businessArea" type="xsd:string"/>
                    <xsd:element name="application" type="xsd:string"/>
                    <xsd:element name="branch" type="xsd:string"/>
                    <xsd:element name="legalEntity" type="xsd:string"/>
                    <xsd:element name="externalIdentifier" type="common.ValuePairSeq_T"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="common.IdTyp">
                <xsd:sequence>
                    <xsd:element name="identifier" type="xsd:string"/>
                    <xsd:element name="businessArea" type="xsd:string"/>
                    <xsd:element name="application" type="xsd:string"/>
                    <xsd:element name="branch" type="xsd:string"/>
                    <xsd:element name="legalEntity" type="xsd:string"/>
                    <xsd:element name="externalIdentifier" type="common.ValuePairSeq_T"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="common.Relation_0_0.RelationTypeSeq">
                <xsd:sequence>
                    <xsd:element maxOccurs="unbounded" minOccurs="0" name="item" 
                        type="xsd:int"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="common.Relation_1_0.Detail">
                <xsd:sequence>
                    <xsd:element name="paymentType" type="xsd:string"/>
                    <xsd:element name="language" type="xsd:string"/>
                    <xsd:element name="processStep" type="xsd:string"/>
                    <xsd:element name="promotion" type="xsd:boolean"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="common.Relation_1_0.RelationParticipation">
                <xsd:sequence>
                    <xsd:element name="endPointId" type="common.IdTyp_T"/>
                    <xsd:element name="percentage" type="xsd:string"/>
                    <xsd:element name="endpointType" type="xsd:int"/>
                    <xsd:element name="order" type="xsd:string"/>
                    <xsd:element name="description" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="common.Relation_1_0.RelationParticipationSeq">
                <xsd:sequence>
                    <xsd:element maxOccurs="unbounded" minOccurs="0" name="item" 
                        type="common.Relation_1_0.RelationParticipation"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:complexType name="common.Relation_1_0.Relation">
                <xsd:sequence>
                    <xsd:element name="identifier" type="common.IdTyp_T"/>
                    <xsd:element name="state" type="xsd:string"/>
                    <xsd:element name="type" type="xsd:int"/>
                    <xsd:element name="stateDate" type="xsd:string"/>
                    <xsd:element name="createDate" type="xsd:string"/>
                    <xsd:element name="relationDetail" type="common.Relation_1_0.Detail"/>
                    <xsd:element name="relationParticipationList" 
                        type="common.Relation_1_0.RelationParticipationSeq"/>
                    <xsd:element name="validity" type="common.ValidityDate_T"/>
                </xsd:sequence>
            </xsd:complexType>
            <xsd:element name="common.Object_1_0.ping">
                <xsd:complexType>
                    <xsd:sequence>
          </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="common.Object_1_0.pingResult">
                <xsd:complexType>
                    <xsd:sequence>
          </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="elda.MsgExchange_1_0.putXMLMessage">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="header" type="common.Header_T"/>
                        <xsd:element name="message" type="xsd:string"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="elda.MsgExchange_1_0.putXMLMessageResult">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="result" type="xsd:string"/>
                        <xsd:element name="ex" type="common.Ex_T"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="elda.MsgExchange_1_0.putExpertise">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="header" type="common.Header_T"/>
                        <xsd:element name="messageXML" type="xsd:string"/>
                        <xsd:element name="messageZIP" type="xsd:base64Binary"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
            <xsd:element name="elda.MsgExchange_1_0.putExpertiseResult">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="ex" type="common.Ex_T"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
        </xsd:schema>
    </types>
    <message name="common.Object_1_0.ping">
        <part element="xsd1:common.Object_1_0.ping" name="parameters"/>
    </message>
    <message name="common.Object_1_0.pingResponse">
        <part element="xsd1:common.Object_1_0.pingResult" name="parameters"/>
    </message>
    <message name="elda.MsgExchange_1_0.putXMLMessage">
        <part element="xsd1:elda.MsgExchange_1_0.putXMLMessage" name="parameters"/>
    </message>
    <message name="elda.MsgExchange_1_0.putXMLMessageResponse">
        <part element="xsd1:elda.MsgExchange_1_0.putXMLMessageResult" name="parameters"/>
    </message>
    <message name="elda.MsgExchange_1_0.putExpertise">
        <part element="xsd1:elda.MsgExchange_1_0.putExpertise" name="parameters"/>
    </message>
    <message name="elda.MsgExchange_1_0.putExpertiseResponse">
        <part element="xsd1:elda.MsgExchange_1_0.putExpertiseResult" name="parameters"/>
    </message>
    <portType name="common.Object_0_0">
  </portType>
    <portType name="common.Object_1_0">
        <operation name="ping">
            <input message="tns:common.Object_1_0.ping" name="ping"/>
            <output message="tns:common.Object_1_0.pingResponse" name="pingResponse"/>
        </operation>
    </portType>
    <portType name="common.Idlcom">
  </portType>
    <portType name="common.Relation_0_0">
        <operation name="ping">
            <input message="tns:common.Object_1_0.ping" name="ping"/>
            <output message="tns:common.Object_1_0.pingResponse" name="pingResponse"/>
        </operation>
    </portType>
    <portType name="common.Relation_1_0">
        <operation name="ping">
            <input message="tns:common.Object_1_0.ping" name="ping"/>
            <output message="tns:common.Object_1_0.pingResponse" name="pingResponse"/>
        </operation>
    </portType>
    <portType name="elda.MsgExchange_0_0">
        <operation name="ping">
            <input message="tns:common.Object_1_0.ping" name="ping"/>
            <output message="tns:common.Object_1_0.pingResponse" name="pingResponse"/>
        </operation>
    </portType>
    <portType name="elda.MsgExchange_1_0">
        <operation name="putXMLMessage">
            <input message="tns:elda.MsgExchange_1_0.putXMLMessage" name="putXMLMessage"/>
            <output message="tns:elda.MsgExchange_1_0.putXMLMessageResponse" 
                name="putXMLMessageResponse"/>
        </operation>
        <operation name="putExpertise">
            <input message="tns:elda.MsgExchange_1_0.putExpertise" name="putExpertise"/>
            <output message="tns:elda.MsgExchange_1_0.putExpertiseResponse" 
                name="putExpertiseResponse"/>
        </operation>
        <operation name="ping">
            <input message="tns:common.Object_1_0.ping" name="ping"/>
            <output message="tns:common.Object_1_0.pingResponse" name="pingResponse"/>
        </operation>
    </portType>
    <binding name="elda.MsgExchange_1_0CORBABinding" type="tns:elda.MsgExchange_1_0">
        <corba:binding repositoryID="IDL:elda/MsgExchange_1_0:1.0"/>
        <operation name="putXMLMessage">
            <corba:operation name="putXMLMessage">
                <corba:param idltype="ns1:common.Header_T" mode="in" name="header"/>
                <corba:param idltype="corba:string" mode="in" name="message"/>
                <corba:param idltype="ns1:common.Ex_T" mode="out" name="ex"/>
                <corba:return idltype="corba:string" name="result"/>
            </corba:operation>
            <input name="putXMLMessage"/>
            <output name="putXMLMessageResponse"/>
        </operation>
        <operation name="putExpertise">
            <corba:operation name="putExpertise">
                <corba:param idltype="ns1:common.Header_T" mode="in" name="header"/>
                <corba:param idltype="corba:string" mode="in" name="messageXML"/>
                <corba:param idltype="ns1:base64BinarySeq" mode="in" name="messageZIP"/>
                <corba:return idltype="ns1:common.Ex_T" name="ex"/>
            </corba:operation>
            <input name="putExpertise"/>
            <output name="putExpertiseResponse"/>
        </operation>
        <operation name="ping">
            <corba:operation name="ping"/>
            <input name="ping"/>
            <output name="pingResponse"/>
        </operation>
    </binding>
    <binding name="elda.MsgExchange_1_0SOAPBinding" type="tns:elda.MsgExchange_1_0">
    <!-- Built client code Change Start -->
    <wsp:PolicyReference URI="#SAML-BST-Policy" />
    <!-- Built client code Change End -->
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="putXMLMessage">
            <soap:operation soapAction="" style="document"/>
            <input name="putXMLMessage">
                <soap:body use="literal"/>
            </input>
            <output name="putXMLMessageResponse">
                <soap:body use="literal"/>
            </output>
        </operation>
        <operation name="putExpertise">
            <soap:operation soapAction="" style="document"/>
            <input name="putExpertise">
                <soap:body use="literal"/>
            </input>
            <output name="putExpertiseResponse">
                <soap:body use="literal"/>
            </output>
        </operation>
        <operation name="ping">
            <soap:operation soapAction="" style="document"/>
            <input name="ping">
                <soap:body use="literal"/>
            </input>
            <output name="pingResponse">
                <soap:body use="literal"/>
            </output>
        </operation>
    </binding>
    <binding name="elda.MsgExchange_0_0CORBABinding" type="tns:elda.MsgExchange_0_0">
        <corba:binding repositoryID="IDL:elda/MsgExchange_0_0:1.0"/>
        <operation name="ping">
            <corba:operation name="ping"/>
            <input name="ping"/>
            <output name="pingResponse"/>
        </operation>
    </binding>
    <binding name="elda.MsgExchange_0_0SOAPBinding" type="tns:elda.MsgExchange_0_0">
    <!-- Built client code Change Start -->
    <wsp:PolicyReference URI="#SAML-BST-Policy" />
    <!-- Built client code Change End -->
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <operation name="ping">
            <soap:operation soapAction="" style="document"/>
            <input name="ping">
                <soap:body use="literal"/>
            </input>
            <output name="pingResponse">
                <soap:body use="literal"/>
            </output>
        </operation>
    </binding>
      <!-- Built client code Change Start -->
    <wsp:Policy xmlns:wsp="http://www.w3.org/ns/ws-policy" Name="SAMLandBSTPolicy"
    wsu:Id="SAML-BST-Policy" xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"
    xmlns:t="http://docs.oasis-open.org/ws-sx/ws-trust/200512" xmlns:wsaw="http://www.w3.org/2005/08/addressing"
    xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <wsp:ExactlyOne>
        <wsp:All>
            <sp:TransportBinding>
                <wsp:Policy>
                    <sp:TransportToken>
                        <wsp:Policy>
                            <sp:HttpsToken RequireClientCertificate="false">
                                <wsp:Policy />
                            </sp:HttpsToken>
                        </wsp:Policy>
                    </sp:TransportToken>
                    <sp:AlgorithmSuite>
                        <wsp:Policy>
                            <sp:TripleDesRsa15 />
                        </wsp:Policy>
                    </sp:AlgorithmSuite>
                    <sp:Layout>
                        <wsp:Policy>
                            <sp:Lax />
                        </wsp:Policy>
                    </sp:Layout>
                </wsp:Policy>
            </sp:TransportBinding>
            <sp:SupportingTokens>
                <wsp:Policy>
                    <sp:IssuedToken sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
                        <sp:RequestSecurityTokenTemplate>
                            <t:TokenType>http://schemas.iona.com/security/IONASSOToken</t:TokenType>
                            <t:KeyType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Bearer</t:KeyType>
                        </sp:RequestSecurityTokenTemplate>
                        <wsp:Policy>
                            <sp:RequireInternalReference />
                        </wsp:Policy>
                        <sp:Issuer>
                            <wsaw:Address>http://to-be-ignored/</wsaw:Address>
                        </sp:Issuer>
                    </sp:IssuedToken>
                </wsp:Policy>
            </sp:SupportingTokens>
            <sp:Wss11>
                <wsp:Policy>
                    <sp:MustSupportRefIssuerSerial />
                    <sp:MustSupportRefThumbprint />
                    <sp:MustSupportRefEncryptedKey />
                </wsp:Policy>
            </sp:Wss11>
            <sp:Trust13>
                <wsp:Policy>
                    <sp:MustSupportIssuedTokens />
                    <sp:RequireClientEntropy />
                    <sp:RequireServerEntropy />
                </wsp:Policy>
            </sp:Trust13>
        </wsp:All>
        <wsp:All>
            <sp:TransportBinding xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702">
                    <wsp:Policy>
                    <sp:TransportToken>
                         <wsp:Policy>
                            <sp:HttpsToken RequireClientCertificate="false">
                                <wsp:Policy />
                            </sp:HttpsToken>
                        </wsp:Policy>
                        </sp:TransportToken>
                        <sp:AlgorithmSuite>
                            <wsp:Policy>
                                <sp:TripleDesRsa15 />
                            </wsp:Policy>
                        </sp:AlgorithmSuite>
                        <sp:Layout>
                            <wsp:Policy>
                                <sp:Lax />
                            </wsp:Policy>
                        </sp:Layout>
                        <sp:IncludeTimestamp />
                    </wsp:Policy>
                </sp:TransportBinding>
                <sp:SupportingTokens xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702">
                    <wsp:Policy>
                        <sp:IssuedToken sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
                            <sp:RequestSecurityTokenTemplate>
                                <t:TokenType>http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0</t:TokenType>
                                <t:KeyType>http://docs.oasis-open.org/ws-sx/ws-trust/200512/Bearer</t:KeyType>
                            </sp:RequestSecurityTokenTemplate>
                            <wsp:Policy>
                                <sp:RequireInternalReference />
                            </wsp:Policy>
                            <sp:Issuer>
                                <wsaw:Address>http://localhost:8080/DoubleItSTS/DoubleItSTSServiceUT
                                </wsaw:Address>
                            </sp:Issuer>
                        </sp:IssuedToken>
                    </wsp:Policy>
                </sp:SupportingTokens>
                <sp:Wss11>
                    <wsp:Policy>
                        <sp:MustSupportRefIssuerSerial />
                        <sp:MustSupportRefThumbprint />
                        <sp:MustSupportRefEncryptedKey />
                    </wsp:Policy>
                </sp:Wss11>
                <sp:Trust13>
                    <wsp:Policy>
                        <sp:MustSupportIssuedTokens />
                        <sp:RequireClientEntropy />
                        <sp:RequireServerEntropy />
                    </wsp:Policy>
                </sp:Trust13>
        </wsp:All>                
        <wsp:All>
			<sp:TransportBinding>
                <wsp:Policy>
                    <sp:TransportToken>
                        <wsp:Policy>
                            <sp:HttpsToken RequireClientCertificate="false">
                                <wsp:Policy />
                            </sp:HttpsToken>
                        </wsp:Policy>
                    </sp:TransportToken>
                    <sp:AlgorithmSuite>
                        <wsp:Policy>
                            <sp:TripleDesRsa15 />
                        </wsp:Policy>
                    </sp:AlgorithmSuite>
                    <sp:Layout>
                        <wsp:Policy>
                            <sp:Lax />
                        </wsp:Policy>
                    </sp:Layout>
                </wsp:Policy>
            </sp:TransportBinding>
            <sp:SignedSupportingTokens>
               <wsp:Policy>
                  <sp:UsernameToken
                     sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
                     <wsp:Policy>
                        <sp:WssUsernameToken10 />
                     </wsp:Policy>
                  </sp:UsernameToken>
               </wsp:Policy>
            </sp:SignedSupportingTokens>
            <sp:Wss11 />
         </wsp:All>      
    </wsp:ExactlyOne>
</wsp:Policy> 
    
    <!-- Built client code Change End -->
    <service name="elda.MsgExchange_1_0CORBAService">
        <port binding="tns:elda.MsgExchange_1_0CORBABinding" 
            name="elda.MsgExchange_1_0CORBAPort">
            <corba:address 
                location="corbaname:rir:/NameService#corba/elda/MsgExchange_1_0"/>
        </port>
    </service>
    <service name="elda.MsgExchange_1_0SOAPService">
        <port binding="tns:elda.MsgExchange_1_0SOAPBinding" 
            name="elda.MsgExchange_1_0SOAPPort">
            <soap:address location="https://localhost:0/elda/MsgExchange_1_0"/>
        </port>
    </service>
    <service name="elda.MsgExchange_0_0CORBAService">
        <port binding="tns:elda.MsgExchange_0_0CORBABinding" 
            name="elda.MsgExchange_0_0CORBAPort">
            <corba:address 
                location="corbaname:rir:/NameService#corba/elda/MsgExchange_0_0"/>
        </port>
    </service>
    <service name="elda.MsgExchange_0_0SOAPService">
        <port binding="tns:elda.MsgExchange_0_0SOAPBinding" 
            name="elda.MsgExchange_0_0SOAPPort">
            <soap:address location="https://localhost:0/elda/MsgExchange_0_0"/>
        </port>
    </service>
    <corba:typeMapping targetNamespace="http://ch.zurich.com/elda/corba/typemap/">
        <corba:sequence bound="0" elemtype="corba:octet" name="base64BinarySeq" 
            repositoryID="IDL:base64BinarySeq:1.0" type="xsd:base64Binary"/>
        <corba:struct name="common.Relation_1_0.Relation" 
            repositoryID="IDL:common/Relation_1_0/Relation:1.0" 
            type="xsd1:common.Relation_1_0.Relation">
            <corba:member idltype="ns1:common.IdTyp_T" name="identifier"/>
            <corba:member idltype="corba:string" name="state"/>
            <corba:member idltype="corba:long" name="type"/>
            <corba:member idltype="corba:string" name="stateDate"/>
            <corba:member idltype="corba:string" name="createDate"/>
            <corba:member idltype="ns1:common.Relation_1_0.Detail" name="relationDetail"/>
            <corba:member idltype="ns1:common.Relation_1_0.RelationParticipationSeq" 
                name="relationParticipationList"/>
            <corba:member idltype="ns1:common.ValidityDate_T" name="validity"/>
        </corba:struct>
        <corba:struct name="elda.MsgExchange_1_0.putXMLMessageResultType" 
            repositoryID="IDL:elda/MsgExchange_1_0/putXMLMessageResultType:1.0" 
            type="xsd1:elda.MsgExchange_1_0.putXMLMessageResult">
            <corba:member idltype="corba:string" name="result"/>
            <corba:member idltype="ns1:common.Ex_T" name="ex"/>
        </corba:struct>
        <corba:struct name="common.SeqLimit_T" repositoryID="IDL:common/SeqLimit_T:1.0" 
            type="xsd1:common.SeqLimit_T">
            <corba:member idltype="corba:boolean" name="returnAll"/>
            <corba:member idltype="corba:long" name="maxToReturn"/>
            <corba:member idltype="corba:boolean" name="hasMore"/>
            <corba:member idltype="corba:long" name="totalFound"/>
        </corba:struct>
        <corba:sequence bound="0" elemtype="ns1:common.ExDescr_T" name="common.Ex_T" 
            repositoryID="IDL:common/Ex_T:1.0" type="xsd1:common.Ex_T"/>
        <corba:sequence bound="0" 
            elemtype="ns1:common.Relation_1_0.RelationParticipation" 
            name="common.Relation_1_0.RelationParticipationSeq" 
            repositoryID="IDL:common/Relation_1_0/RelationParticipationSeq:1.0" 
            type="xsd1:common.Relation_1_0.RelationParticipationSeq"/>
        <corba:sequence bound="0" elemtype="ns1:common.ExDescr_T" name="common.Remarks_T" 
            repositoryID="IDL:common/Remarks_T:1.0" type="xsd1:common.Remarks_T"/>
        <corba:struct name="common.ExValuePair_T" 
            repositoryID="IDL:common/ExValuePair_T:1.0" type="xsd1:common.ExValuePair_T">
            <corba:member idltype="corba:string" name="key"/>
            <corba:member idltype="corba:string" name="value"/>
            <corba:member idltype="corba:long" name="ctx"/>
        </corba:struct>
        <corba:struct name="common.IdTyp" repositoryID="IDL:common/IdTyp:1.0" 
            type="xsd1:common.IdTyp">
            <corba:member idltype="corba:string" name="identifier"/>
            <corba:member idltype="corba:string" name="businessArea"/>
            <corba:member idltype="corba:string" name="application"/>
            <corba:member idltype="corba:string" name="branch"/>
            <corba:member idltype="corba:string" name="legalEntity"/>
            <corba:member idltype="ns1:common.ValuePairSeq_T" name="externalIdentifier"/>
        </corba:struct>
        <corba:struct name="common.Object_1_0.pingType" 
            repositoryID="IDL:common/Object_1_0/pingType:1.0" 
            type="xsd1:common.Object_1_0.ping"/>
        <corba:struct name="common.ValuePair_T" repositoryID="IDL:common/ValuePair_T:1.0" 
            type="xsd1:common.ValuePair_T">
            <corba:member idltype="corba:string" name="key"/>
            <corba:member idltype="corba:string" name="value"/>
            <corba:member idltype="corba:string" name="ctx"/>
        </corba:struct>
        <corba:struct name="elda.MsgExchange_1_0.putExpertiseType" 
            repositoryID="IDL:elda/MsgExchange_1_0/putExpertiseType:1.0" 
            type="xsd1:elda.MsgExchange_1_0.putExpertise">
            <corba:member idltype="ns1:common.Header_T" name="header"/>
            <corba:member idltype="corba:string" name="messageXML"/>
            <corba:member idltype="ns1:base64BinarySeq" name="messageZIP"/>
        </corba:struct>
        <corba:struct name="common.Relation_1_0.RelationParticipation" 
            repositoryID="IDL:common/Relation_1_0/RelationParticipation:1.0" 
            type="xsd1:common.Relation_1_0.RelationParticipation">
            <corba:member idltype="ns1:common.IdTyp_T" name="endPointId"/>
            <corba:member idltype="corba:string" name="percentage"/>
            <corba:member idltype="corba:long" name="endpointType"/>
            <corba:member idltype="corba:string" name="order"/>
            <corba:member idltype="corba:string" name="description"/>
        </corba:struct>
        <corba:struct name="common.ExDescr_T" repositoryID="IDL:common/ExDescr_T:1.0" 
            type="xsd1:common.ExDescr_T">
            <corba:member idltype="corba:string" name="domain"/>
            <corba:member idltype="corba:long" name="exCode"/>
            <corba:member idltype="corba:string" name="timestamp"/>
            <corba:member idltype="ns1:common.ExValuePairSeq_T" name="extend"/>
            <corba:member idltype="corba:string" name="traceId"/>
        </corba:struct>
        <corba:struct name="common.ValidityDate_T" 
            repositoryID="IDL:common/ValidityDate_T:1.0" 
            type="xsd1:common.ValidityDate_T">
            <corba:member idltype="corba:string" name="from"/>
            <corba:member idltype="corba:string" name="until"/>
        </corba:struct>
        <corba:sequence bound="0" elemtype="ns1:common.ValuePair_T" 
            name="common.ValuePairSeq_T" repositoryID="IDL:common/ValuePairSeq_T:1.0" 
            type="xsd1:common.ValuePairSeq_T"/>
        <corba:struct name="common.Header_T" repositoryID="IDL:common/Header_T:1.0" 
            type="xsd1:common.Header_T">
            <corba:member idltype="corba:boolean" name="traceOn"/>
            <corba:member idltype="corba:string" name="clientId"/>
        </corba:struct>
        <corba:struct name="common.IdTyp_T" repositoryID="IDL:common/IdTyp_T:1.0" 
            type="xsd1:common.IdTyp_T">
            <corba:member idltype="corba:long" name="identifier"/>
            <corba:member idltype="corba:string" name="businessArea"/>
            <corba:member idltype="corba:string" name="application"/>
            <corba:member idltype="corba:string" name="branch"/>
            <corba:member idltype="corba:string" name="legalEntity"/>
            <corba:member idltype="ns1:common.ValuePairSeq_T" name="externalIdentifier"/>
        </corba:struct>
        <corba:struct name="common.Object_1_0.pingResultType" 
            repositoryID="IDL:common/Object_1_0/pingResultType:1.0" 
            type="xsd1:common.Object_1_0.pingResult"/>
        <corba:sequence bound="0" elemtype="ns1:common.ExValuePair_T" 
            name="common.ExValuePairSeq_T" repositoryID="IDL:common/ExValuePairSeq_T:1.0" 
            type="xsd1:common.ExValuePairSeq_T"/>
        <corba:sequence bound="0" elemtype="ns1:common.Remarks_T" 
            name="common.RemarksSeq_T" repositoryID="IDL:common/RemarksSeq_T:1.0" 
            type="xsd1:common.RemarksSeq_T"/>
        <corba:struct name="elda.MsgExchange_1_0.putXMLMessageType" 
            repositoryID="IDL:elda/MsgExchange_1_0/putXMLMessageType:1.0" 
            type="xsd1:elda.MsgExchange_1_0.putXMLMessage">
            <corba:member idltype="ns1:common.Header_T" name="header"/>
            <corba:member idltype="corba:string" name="message"/>
        </corba:struct>
        <corba:sequence bound="0" elemtype="corba:long" 
            name="common.Relation_0_0.RelationTypeSeq" 
            repositoryID="IDL:common/Relation_0_0/RelationTypeSeq:1.0" 
            type="xsd1:common.Relation_0_0.RelationTypeSeq"/>
        <corba:struct name="common.Relation_1_0.Detail" 
            repositoryID="IDL:common/Relation_1_0/Detail:1.0" 
            type="xsd1:common.Relation_1_0.Detail">
            <corba:member idltype="corba:string" name="paymentType"/>
            <corba:member idltype="corba:string" name="language"/>
            <corba:member idltype="corba:string" name="processStep"/>
            <corba:member idltype="corba:boolean" name="promotion"/>
        </corba:struct>
        <corba:struct name="elda.MsgExchange_1_0.putExpertiseResultType" 
            repositoryID="IDL:elda/MsgExchange_1_0/putExpertiseResultType:1.0" 
            type="xsd1:elda.MsgExchange_1_0.putExpertiseResult">
            <corba:member idltype="ns1:common.Ex_T" name="ex"/>
        </corba:struct>
        <corba:struct name="common.Cursor_T" repositoryID="IDL:common/Cursor_T:1.0" 
            type="xsd1:common.Cursor_T">
            <corba:member idltype="ns1:common.SeqLimit_T" name="limSeq"/>
            <corba:member idltype="ns1:base64BinarySeq" name="sessionKey"/>
        </corba:struct>
    </corba:typeMapping>
    <routing:route name="Route_MsgExchange_1_0">
        <routing:source port="elda.MsgExchange_1_0SOAPPort" 
            service="tns:elda.MsgExchange_1_0SOAPService"/>
        <routing:destination port="elda.MsgExchange_1_0CORBAPort" 
            service="tns:elda.MsgExchange_1_0CORBAService"/>
    </routing:route>
    <routing:route name="Route_MsgExchange_0_0">
        <routing:source port="elda.MsgExchange_0_0SOAPPort" 
            service="tns:elda.MsgExchange_0_0SOAPService"/>
        <routing:destination port="elda.MsgExchange_0_0CORBAPort" 
            service="tns:elda.MsgExchange_0_0CORBAService"/>
    </routing:route>
</definitions>
